Aplikacja estymuje cenę używanego samochodu na podstawie cech podanych przez użytkownika (np. marka, rok, moc, paliwo, kolor itd.) i przelicza wynik na wybraną walutę.
Model został zbudowany przy użyciu algorytmu Random Forest Regressor i wytrenowany na danych rzeczywistych zawierających szczegóły tysięcy ogłoszeń sprzedaży samochodów. Dane zostały pobrane z serwisu Kaggle Datasets.
Proces przygotowania danych obejmował czyszczenie, inżynierię cech (np. tworzenie zmiennych wiekowych, interakcji), oraz potencjalnie kodowanie zmiennych kategorialnych.
Wytrenowany model oraz obiekt skalera zostały zakodowane i są przechowywane w usłudze DigitalOcean Spaces
Interaktywny interfejs użytkownika został zbudowany przy użyciu frameworka Streamlit. Umożliwia on użytkownikowi wprowadzanie kluczowych cech pojazdu poprzez formularz (m.in. marka, rok produkcji, moc silnika, rodzaj paliwa, kolor).
System integruje narzędzia OpenTelemetry i platformę Langfuse w celu monitorowania wydajności aplikacji, śledzenia przepływu żądań, rejestrowania zdarzeń (np. rozpoczęcie predykcji, pobranie kursu walut), metryk (np. czas odpowiedzi) oraz błędów.

Biblioteka/Narzędzia i Zastosowanie:

1. OpenTelemetry + Langfuse - Monitorowanie działania aplikacji – logowanie zdarzeń, metryk, tras i błędów w czasie rzeczywistym.
2. logfire - Wysyłanie logów oraz śledzenie działania aplikacji (m.in. do Langfuse lub innych systemów observability).
3. requests - Pobieranie danych (np. kursów walut) z zewnętrznego API HTTP.
4. pickle - Serializacja i deserializacja modeli ML oraz obiektów Pythona (np. scalera) do plików binarnych.
5. pandas - Praca z danymi tabelarycznymi – wczytywanie CSV, czyszczenie danych, manipulacje DataFrame.
6. numpy - Operacje matematyczne i przetwarzanie danych numerycznych – m.in. tworzenie cech pochodnych.
7. scikit-learn - Pipeline ML: podział danych (train_test_split), trenowanie modelu (RandomForestRegressor), ocena (MSE, R²), standaryzacja (StandardScaler).
8. boto3 - Komunikacja z Digital Ocean Spaces (interfejs zgodny z Amazon S3) – pobieranie i zapisywanie plików.
9. io - Obsługa strumieni danych – np. wczytywanie plików z chmury jako StringIO.
10. streamlit - Tworzenie aplikacji webowej – m.in. wyświetlanie interfejsu, odczyt danych z secrets.toml.
11. base64, os - Obsługa zmiennych środowiskowych i autoryzacji (np. kodowanie kluczy API).